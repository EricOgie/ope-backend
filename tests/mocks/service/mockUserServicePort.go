// Code generated by MockGen. DO NOT EDIT.
// Source: authService.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	models "github.com/EricOgie/ope-be/domain/models"
	requestDTO "github.com/EricOgie/ope-be/dto/requestDTO"
	responseDto "github.com/EricOgie/ope-be/dto/responseDto"
	ericerrors "github.com/EricOgie/ope-be/ericerrors"
	gomock "github.com/golang/mock/gomock"
)

// MockUserServicePort is a mock of UserServicePort interface.
type MockUserServicePort struct {
	ctrl     *gomock.Controller
	recorder *MockUserServicePortMockRecorder
}

// MockUserServicePortMockRecorder is the mock recorder for MockUserServicePort.
type MockUserServicePortMockRecorder struct {
	mock *MockUserServicePort
}

// NewMockUserServicePort creates a new mock instance.
func NewMockUserServicePort(ctrl *gomock.Controller) *MockUserServicePort {
	mock := &MockUserServicePort{ctrl: ctrl}
	mock.recorder = &MockUserServicePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServicePort) EXPECT() *MockUserServicePortMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserServicePort) ChangePassword(arg0 requestDTO.LoginRequest) (*responseDto.PlainResponseDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0)
	ret0, _ := ret[0].(*responseDto.PlainResponseDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserServicePortMockRecorder) ChangePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserServicePort)(nil).ChangePassword), arg0)
}

// CompleteLoginProcess mocks base method.
func (m *MockUserServicePort) CompleteLoginProcess(arg0 models.Claim) (*responseDto.CompleteUserDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteLoginProcess", arg0)
	ret0, _ := ret[0].(*responseDto.CompleteUserDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// CompleteLoginProcess indicates an expected call of CompleteLoginProcess.
func (mr *MockUserServicePortMockRecorder) CompleteLoginProcess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteLoginProcess", reflect.TypeOf((*MockUserServicePort)(nil).CompleteLoginProcess), arg0)
}

// FetchOneUser mocks base method.
func (m *MockUserServicePort) FetchOneUser(arg0 string) (*responseDto.CompleteUserDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOneUser", arg0)
	ret0, _ := ret[0].(*responseDto.CompleteUserDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// FetchOneUser indicates an expected call of FetchOneUser.
func (mr *MockUserServicePortMockRecorder) FetchOneUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOneUser", reflect.TypeOf((*MockUserServicePort)(nil).FetchOneUser), arg0)
}

// GetAllUsers mocks base method.
func (m *MockUserServicePort) GetAllUsers() (*[]responseDto.UserDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].(*[]responseDto.UserDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserServicePortMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserServicePort)(nil).GetAllUsers))
}

// Login mocks base method.
func (m *MockUserServicePort) Login(arg0 requestDTO.LoginRequest) (*responseDto.OneUserDto, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(*responseDto.OneUserDto)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServicePortMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServicePort)(nil).Login), arg0)
}

// ProfileUpdate mocks base method.
func (m *MockUserServicePort) ProfileUpdate(arg0 requestDTO.UserDetailsRequest) (*responseDto.UserProfileDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProfileUpdate", arg0)
	ret0, _ := ret[0].(*responseDto.UserProfileDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// ProfileUpdate indicates an expected call of ProfileUpdate.
func (mr *MockUserServicePortMockRecorder) ProfileUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfileUpdate", reflect.TypeOf((*MockUserServicePort)(nil).ProfileUpdate), arg0)
}

// RegisterUser mocks base method.
func (m *MockUserServicePort) RegisterUser(arg0 requestDTO.RegisterRequest) (*responseDto.PlainResponseDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0)
	ret0, _ := ret[0].(*responseDto.PlainResponseDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServicePortMockRecorder) RegisterUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserServicePort)(nil).RegisterUser), arg0)
}

// RequestPasswordChange mocks base method.
func (m *MockUserServicePort) RequestPasswordChange(arg0 models.UserEmail) (*responseDto.OneUserDto, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPasswordChange", arg0)
	ret0, _ := ret[0].(*responseDto.OneUserDto)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// RequestPasswordChange indicates an expected call of RequestPasswordChange.
func (mr *MockUserServicePortMockRecorder) RequestPasswordChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPasswordChange", reflect.TypeOf((*MockUserServicePort)(nil).RequestPasswordChange), arg0)
}

// SetBankDetails mocks base method.
func (m *MockUserServicePort) SetBankDetails(arg0 requestDTO.BankRequest) (*responseDto.BankAccountDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBankDetails", arg0)
	ret0, _ := ret[0].(*responseDto.BankAccountDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// SetBankDetails indicates an expected call of SetBankDetails.
func (mr *MockUserServicePortMockRecorder) SetBankDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBankDetails", reflect.TypeOf((*MockUserServicePort)(nil).SetBankDetails), arg0)
}

// VerifyAcc mocks base method.
func (m *MockUserServicePort) VerifyAcc(arg0 requestDTO.VerifyRequest) (*responseDto.LoginResponseDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAcc", arg0)
	ret0, _ := ret[0].(*responseDto.LoginResponseDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// VerifyAcc indicates an expected call of VerifyAcc.
func (mr *MockUserServicePortMockRecorder) VerifyAcc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAcc", reflect.TypeOf((*MockUserServicePort)(nil).VerifyAcc), arg0)
}
