// Code generated by MockGen. DO NOT EDIT.
// Source: loanService.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	models "github.com/EricOgie/ope-be/domain/models"
	requestDTO "github.com/EricOgie/ope-be/dto/requestDTO"
	responseDto "github.com/EricOgie/ope-be/dto/responseDto"
	ericerrors "github.com/EricOgie/ope-be/ericerrors"
	gomock "github.com/golang/mock/gomock"
)

// MockLoanServicePort is a mock of LoanServicePort interface.
type MockLoanServicePort struct {
	ctrl     *gomock.Controller
	recorder *MockLoanServicePortMockRecorder
}

// MockLoanServicePortMockRecorder is the mock recorder for MockLoanServicePort.
type MockLoanServicePortMockRecorder struct {
	mock *MockLoanServicePort
}

// NewMockLoanServicePort creates a new mock instance.
func NewMockLoanServicePort(ctrl *gomock.Controller) *MockLoanServicePort {
	mock := &MockLoanServicePort{ctrl: ctrl}
	mock.recorder = &MockLoanServicePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanServicePort) EXPECT() *MockLoanServicePortMockRecorder {
	return m.recorder
}

// Borrow mocks base method.
func (m *MockLoanServicePort) Borrow(arg0 requestDTO.LoanRequest) (*responseDto.LoanResDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Borrow", arg0)
	ret0, _ := ret[0].(*responseDto.LoanResDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// Borrow indicates an expected call of Borrow.
func (mr *MockLoanServicePortMockRecorder) Borrow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Borrow", reflect.TypeOf((*MockLoanServicePort)(nil).Borrow), arg0)
}

// FetchInstallments mocks base method.
func (m *MockLoanServicePort) FetchInstallments(arg0 int) (*[]models.Querypayment, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInstallments", arg0)
	ret0, _ := ret[0].(*[]models.Querypayment)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// FetchInstallments indicates an expected call of FetchInstallments.
func (mr *MockLoanServicePortMockRecorder) FetchInstallments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInstallments", reflect.TypeOf((*MockLoanServicePort)(nil).FetchInstallments), arg0)
}

// GetLoans mocks base method.
func (m *MockLoanServicePort) GetLoans(arg0 int) (*[]models.QueryLoan, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoans", arg0)
	ret0, _ := ret[0].(*[]models.QueryLoan)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// GetLoans indicates an expected call of GetLoans.
func (mr *MockLoanServicePortMockRecorder) GetLoans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoans", reflect.TypeOf((*MockLoanServicePort)(nil).GetLoans), arg0)
}

// PayInPart mocks base method.
func (m *MockLoanServicePort) PayInPart(arg0 requestDTO.LoanPayRequest) (*responseDto.RepaymentResDTO, *ericerrors.EricError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayInPart", arg0)
	ret0, _ := ret[0].(*responseDto.RepaymentResDTO)
	ret1, _ := ret[1].(*ericerrors.EricError)
	return ret0, ret1
}

// PayInPart indicates an expected call of PayInPart.
func (mr *MockLoanServicePortMockRecorder) PayInPart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayInPart", reflect.TypeOf((*MockLoanServicePort)(nil).PayInPart), arg0)
}
